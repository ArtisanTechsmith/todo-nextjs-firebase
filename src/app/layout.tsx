import "./globals.css";
import type { Metadata } from "next";
import { isMobile } from "react-device-detect";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v15-appRouter";
import { AppBar, Box, Toolbar } from "@mui/material";
import { Geist, Geist_Mono } from "next/font/google";
import AppThemeProvider from "@/core/providers/ThemeProvider";
import ClientSideLayout from "@/core/layout/ClientSideLayout";

const spoofMobile = true; // For testing

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <AppThemeProvider>
          <AppRouterCacheProvider>
            <AppBar position="static">
              <Toolbar>
                <div>AppBar - Toolbar</div>
              </Toolbar>
            </AppBar>
            {/*
            Render the application as a Single-Page Application (SPA) if a mobile device is detected
            via user-agent sniffing. See more details within `ClientSideLayout` component

            Otherwise, handle navigation using built-in NextJS router as standard Multi-Page web application
            */}
            {isMobile || spoofMobile ? <ClientSideLayout>{children}</ClientSideLayout> : <Box>{children}</Box>}
          </AppRouterCacheProvider>
        </AppThemeProvider>
      </body>
    </html>
  );
}
